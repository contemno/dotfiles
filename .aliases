#!/bin/bash

#######################################################
# Local AND Remote aliases
#
alias fuck='cmd="$(fc -ln -1)" && echo "$cmd" && sudo $cmd'
alias yaml2json='_yaml2json() { python -c '\''import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)'\'' < "$1"; }; _yaml2json'
alias ll='ls -l --color=auto'
alias la='ls -la --color=auto'
alias ls='ls --color=auto'
# For btrfs
alias cp='cp --reflink=auto'
alias btrbk='btrbk -c /etc/btrbk/$(hostname -s).conf'
alias snapper-list='snapper list-configs \
	| awk '\''NR > 2 { print $1 }'\'' \
	| while read -r conf; do echo -e "\n#### $conf ####"; sudo snapper -c $conf list; done'

#alias docker='sudo docker'

# Remove all docker containers running and exited
alias docker-rma='__drma() { docker ps -aq "$@" | xargs -r docker rm -f; }; __drma'
# Remove all docker images
alias docker-rmia='__drmia() { docker images -q "$@" | xargs -r docker rmi -f; }; __drmia'
# Remove all custom docker networks
alias docker-rmnet='__drmnet() { docker network ls -q -f type=custom "$@" | xargs -r docker network rm; }; __drmnet'
# Remove all unused volumes
alias docker-rmvol='__drmvol() { docker volume ls -q "$@" | xargs -r docker volume rm; }; __drmvol'
# Remove all docker containers and all docker images
alias docker-rmall='docker-rma && docker-rmia'
# Remove all docker containers, images, custom networks, and volumes
alias docker-nuke='docker-rmall; docker-rmnet; docker-rmvol'
# Remove only exited containers, unused images, unused networks, and unused volumes
alias docker-clean='docker-rma -f status=exited; docker-rmia -f dangling=true; docker-rmnet; docker-rmvol -f dangling=true'

alias mockbuild='\
	__mock() {
		local SPEC="$1" \
		&& shift \
		&& rpmlint "$SPEC" \
		&& spectool -g "$SPEC" \
		&& local SRPM=$( mock "$@" -v --resultdir . --buildsrpm --spec "$SPEC" --sources . 2>&1 | awk "/ Wrote: /{ print gensub(\".*/([^/]+)$\",\"\\\1\",\"g\",\$3) }" ) \
		&& mock "$@" --resultdir . "${SRPM:?ERROR: Missing SRPM}"; \
	}; __mock'

alias mockbuild_noclean='mockbuild --no-cleanup-after --no-cleanup'
alias mkgrub='grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg'
alias userinstalled='readarray -t nevra < <(sudo dnf history userinstalled); rpm -q --qf="%{name}\n" "${nevra[@]}"'
alias vagrant-killall="vagrant global-status | sed '/------/,/^ \$/!d;/^ \$/d;2d' | awk '{print \$1}' | xargs vagrant destroy -f"
eval alias tmux="'tmux -f ${__TMUXRC}'" # __TMUXRC is in .common

# Please god help me remember dnf/yum
if hash dnf &>/dev/null; then
	alias dnf-repowhere='dnf repoquery --qf="%{name}-%{version}-%{release}.%{arch}\t%{reponame}"'
	alias yum='dnf'
elif hash yum &>/dev/null; then
	alias yum-repowhere='repoquery --qf="%{name}-%{version}-%{release}.%{arch}\t%{repoid}"'
	alias dnf='yum'
elif hash apt-get &>/dev/null; then
	echo "Debian, really? Idiot!"
fi

if command -v pygmentize &>/dev/null; then
	alias pcat='pygmentize -g'
fi

# Ok got me, not aliases but they act like ones
# Neat little script to upload files to hastebin.com
if hash curl &>/dev/null; then
	haste ()
	{
	    local S="https"
	    local H="hastebin.com"
	    local P=""
	    local SHP="${S}://${H}${P}/"
	    curl -X POST -s --data-binary @- "${SHP}documents" \
		| awk -F '"' '{print a$4}' a="${SHP}"
	}
fi

replace_in_file_recursive() {
	trap 'unset files' RETURN
	local a="$1" b="$2" nl=$'\n'
	readarray -t files < <(grep -Rli "$a")
	(( "${#files[@]}" == 0 )) && { echo "No files match!"; return 1; }
	cat <<-EOF
		Files:
		$(
			for ((i=0;i<${#files[@]};i++)); do
				local grep_line="$(grep --color="always" -h "$a" "${files[i]}")"
				lines+=( "${files[i]}%%%${grep_line}" )
			done
			printf "\n\t%s" "${lines[@]}" |column -t -s'%%%'
		 )$nl
			Replace all occurances of "$a" with "$b"?
	EOF
	select prompt in "Yes" "No"; do
		case $prompt in
			Yes) sed -i "s|${a}|${b}|g" "${files[@]}"; return ;;
			No) return ;;
		esac
	done
}

if hash dnf &>/dev/null; then
# Remove repo and packages together
	dnf-nukerepo() {
		get_num_pkgs() {
			sudo dnf repo-pkgs "$1" list installed \
				| awk 'NR<3 && /^(Last metadata|Installed)/{--NR}; END { print NR }'
		}
		delete_repo() {
			printf "%s %s\n" "Deleting repo:" "$1"
			sudo dnf repolist -v --repoid "$1" \
				| awk '/Repo-filename/{ print $2 }' | xargs -r sudo rm
		}
		local repo="$1"
		if [[ "$(get_num_pkgs "$repo")" -gt 0 ]]; then
			sudo dnf repo-pkgs "$repo" remove
			if [[ "$(get_num_pkgs "$repo")" -eq 0 ]]; then
				delete_repo "$repo"
			fi
		else
			delete_repo "$repo"
		fi

	}
# Print what group a package is in
	dnf-groupfind() {
		sudo dnf group info '*' \
			| awk 	-v package="$1" \
				-v red="$(tput setaf 196)" \
				-v rst="$(tput sgr0)" \
				'
				BEGIN {
					FS=": "
					group_reg="^Group: "
					opt_reg="^ Optional Packages:"
				}
				$0 ~ group_reg { group=$2 }
				$0 ~ opt_reg { opt=group }
				$0 ~ "^[ ]*"package {
					name=$1
					found=1
					gsub(" ","",name)
					if ( opt == group ) {
						print name,"-",group,red"- Optional"rst" ( add \"with-optional\" to dnf group install command )"
					} else {
						print name,"-",group
					}
				}
				END {
					if ( ! found ) { print red"Not found."rst }
				}
				'
	}
fi
# end dnf if

# Find listening ports of a service cgroup
# https://www.redpill-linpro.com/sysadvent/2016/12/22/systemd-at-3am.html

lsof_listen() {
	local pids=$( ps -e -o pid,cgroup | awk '$2 ~ /'"$1"'/ { print "-p", $1 }' )
	sudo lsof -n -i -a -P ${pids:?ERROR: No PIDs found.}
}

# Useful to output the cert information of a domain

openssl_sclient() {
	openssl s_client -connect "$1" 2>&1 </dev/null \
		| sed '/^-----/,/^-----/!d' \
		| openssl x509 -noout -text \
		| sed -r '/:[[:alnum:]]{2}:$/d'
}
